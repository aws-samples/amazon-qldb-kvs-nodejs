/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *   
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * You may obtain a copy of the License at

 * http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Result, TransactionExecutor } from "amazon-qldb-driver-nodejs";
import { GetRevisionCommandInput, GetRevisionCommandOutput, QLDB, ValueHolder } from "@aws-sdk/client-qldb";
import { Base64EncodedString, validateTableNameConstrains } from "./Util";
import { dom } from "ion-js";

import { log } from "./Logging";
const logger = log.getLogger("qldb-helper");

/**
 * Get the revision data object for a specified document ID and block address.
 * Also returns a proof of the specified revision for verification.
 * @param ledgerName Name of the ledger containing the document to query.
 * @param documentId Unique ID for the document to be verified, contained in the committed view of the document.
 * @param blockAddress The location of the block to request.
 * @param digestTipAddress The latest block location covered by the digest.
 * @param qldbClient The QLDB control plane client to use.
 * @returns Promise which fulfills with a GetRevisionResponse.
 */
export async function getRevision(
    ledgerName: string,
    documentId: string,
    blockAddress: ValueHolder,
    digestTipAddress: ValueHolder,
    qldbClient: QLDB
): Promise<GetRevisionCommandOutput> {
    const fcnName = "[GetRevision getRevision]"
    try {
        const request: GetRevisionCommandInput = {
            Name: ledgerName,
            BlockAddress: blockAddress,
            DocumentId: documentId,
            DigestTipAddress: digestTipAddress
        };
        return await qldbClient.getRevision(request);
    } catch (err) {
        throw `${fcnName} ${err} `
    }
}

/**
 * Get full revision data object including the metadata for a specified document ID and block address.
 * @param txn An instance of transaction executor object.
 * @param tableName The name of the table containing the document.
 * @param documentId The Id of the document generated by QLDB during creation.
 * @param transactionId An ID of a transaction, that created or updated the document and triggered creation of new document revision.
 * @returns Promise which fulfills with Ion Value.
 */
export async function getRevisionByDocIdAndTxId(
    txn: TransactionExecutor,
    tableName: string,
    documentId: string,
    transactionId: string
): Promise<dom.Value> {
    const fcnName = "[GetRevision getRevisionByDocIdAndTxId]"
    validateTableNameConstrains(tableName);
    const statement = `SELECT * FROM history(${tableName}) AS h WHERE h.metadata.id = ? AND h.metadata.txId = ?`
    try {
        logger.debug(`${fcnName} Executing statement ${statement}`);
        const result: Result = await txn.execute(statement, documentId, transactionId);
        return result.getResultList()[0];

    } catch (err) {
        throw `${fcnName} ${err}`
    }
}

/**
 * Get ledger metadata object for a specified document ID and block address.
 * @param txn An instance of transaction executor object.
 * @param tableName The name of the table containing the document.
 * @param documentId The Id of the document generated by QLDB during creation.
 * @param transactionId An ID of a transaction, that created or updated the document and triggered creation of new document revision.
 * @returns Promise which fulfills with Ion Value.
 */
export async function getRevisionMetadataByDocIdAndTxId(
    txn: TransactionExecutor,
    tableName: string,
    documentId: string,
    transactionId: string
): Promise<dom.Value> {
    const fcnName = "[GetRevision getRevisionMetadataByDocIdAndTxId]"
    validateTableNameConstrains(tableName);
    const statement = `SELECT blockAddress, hash, metadata FROM history(${tableName}) AS h WHERE h.metadata.id = ? AND h.metadata.txId = ?`
    try {
        logger.debug(`${fcnName} Executing statement ${statement}`);
        const result: Result = await txn.execute(statement, documentId, transactionId);
        return result.getResultList()[0];

    } catch (err) {
        throw `${fcnName} ${err}`
    }
}

